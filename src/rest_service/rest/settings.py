"""
Django settings for rest project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os, json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
DEBUG = os.environ.get("DEBUG", True)

SECRET_KEY = "django-insecure-z6s5a0#ost^2$**&-%(8k)%7!fa#ti1b@d_eh*2b)dd9&(^c%!"
if not DEBUG:
    try:
        SECRET_KEY = os.environ.get("SECRET_KEY")
    except: raise Exception("SECRET_KEY not set")

# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    #Plugins
    "rest_framework",
    "django_filters",
    "drf_api_logger",
    # Internal Apps
    "team",
    "evaluate",
]

# REST_FRAMEWORK = {
#     'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
# }


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    'drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware',
]

ROOT_URLCONF = "rest.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "rest.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DEFAULT_DB_CONFIG = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }

DEV_CONFIG  = {
    "default": DEFAULT_DB_CONFIG,
    "evaluation": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "evaluation.sqlite3",
    }
}

PROD_CONFIG = {
    "default": DEFAULT_DB_CONFIG,
    'evaluation': {
        'ENGINE': 'django.db.backends.mysql',
        "HOST": os.environ.get("MYSQL_HOST", "mysql"),
        "NAME": os.environ.get("MYSQL_DB"),
        "USER": os.environ.get("MYSQL_USER"),
        "PASSWORD": os.environ.get("MYSQL_PASSWORD"),
        'PORT': int(os.environ.get("MYSQL_PORT", 3306))
    }
}

DATABASES = DEV_CONFIG if DEBUG else PROD_CONFIG


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DATABASE_ROUTERS = ["rest.db_router.DatabaseRouter"]


DRF_API_LOGGER_DATABASE = True
DRF_LOGGER_QUEUE_MAX_SIZE = 30

LOGGER_CONF_FILE = open("rest/logger.json")
LOGGS_DIR = BASE_DIR / "logs"
LOGGS_DIR.mkdir(exist_ok=True)
LOGGING = json.loads(LOGGER_CONF_FILE.read())


# RabbitMQ configuration
RABBIT_HOST = os.environ.get("RABBITMQ_URL", "rabbitmq")
TEST_QUEUE = os.environ.get("TEST_QUEUE", "Test_Queue")